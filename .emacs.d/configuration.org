#+TITLE: Emacs Configuration

* Use sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
#+END_SRC

* =evil-mode=

#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (evil-mode t)
#+END_SRC

[[https://www.emacswiki.org/emacs/Evil][Evil]]

* UI preferences
** Tweak window chrome

 I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

** Custom solarized-dark theme

I like the solarized-dark theme. I prefer keeping all the characters in the same
side and font, though.

#+BEGIN_SRC emacs-lisp
  (defun hrs/apply-solarized-theme ()
    (setq solarized-use-variable-pitch nil)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (setq solarized-high-contrast-mode-line t)
    (load-theme 'solarized-dark t))
#+END_SRC

If this code is being evaluated by =emacs --daemon=, ensure that each subsequent
frame is themed appropriately.

#+BEGIN_SRC emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                    (hrs/apply-solarized-theme)))
    (hrs/apply-solarized-theme))
#+END_SRC

** Disable visual bell

=sensible-defaults= replaces the audible bell with a visual one, but I really
don't even want that (and my Emacs/Mac pair renders it poorly). This disables
the bell altogether.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Scroll conservatively

When point goes outside the window, Emacs usually recenters the buffer point.
I'm not crazy about that. This changes scrolling behavior to only scroll as far
as point goes.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC

* Publishing and task management with Org-mode
** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Fontify code in code blocks

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language’s major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Quickly insert a block of elisp: (<el)

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

Enable spell-checking in Org-mode. The quick brown fox jumps over the lazy dog.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

** Org-mode

Store my org files in =~/Dropbox/org/=, define the location of the index file, and archive finished tasks in =~/Dropbox/org/archive.org=.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org")
  (defun org-file-path (filename)
	  "Return the absolute address of an org file, given its relative name."
	  (concat (file-name-as-directory org-directory) filename))

  (setq org-index-file (org-file-path "index.org"))
  (setq org-archive-location
	  (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

Derive my agenda from this directory:

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Dropbox/org"))
#+END_SRC

*** Keybindings

Bind a few handy keys.

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC

Hit =C-c i= to quickly open up my index file.

#+BEGIN_SRC emacs-lisp
  (defun gh/open-index-file ()
    "Open the master org TODO list."
    (interactive)
    (find-file org-index-file)
    (flycheck-mode -1)
    (end-of-buffer))

  (global-set-key (kbd "C-c i") 'gh/open-index-file)
#+END_SRC

* Editing Settings
** Quickly visit Emacs configuration

I futz around with my dotfiles a lot. This binds =C-c e= to quickly open my
Emacs configuration file.

#+BEGIN_SRC emacs-lisp
  (defun gh/visit-emacs-config ()
    (interactive)
    (find-file "~/Dropbox/emacs/configuration.org"))

  (global-set-key (kbd "C-c e") 'gh/visit-emacs-config)
#+END_SRC

** Always kill current buffer

Assume that I always want to kill the current buffer when hitting =C-x k=.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'gh/kill-current-buffer)
#+END_SRC

** Use =company-mode= everywhere

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

[[http://company-mode.github.io/][company-mode]]

** Save place

Purpose: When you visit a file, point goes to the last place where it was when you previously visited the same file.

#+BEGIN_SRC emacs-lisp
(save-place-mode 1)
#+END_SRC

[[https://www.emacswiki.org/emacs/SavePlace][Save Place]]
** Configure yasnippet
** Configure =ido=

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (flx-ido-mode 1) ; better/faster matching
  (setq ido-create-new-buffer 'always) ; don't confirm to create new buffers
  (ido-vertical-mode 1)
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

[[https://www.emacswiki.org/emacs/InteractivelyDoThings][ido]]
[[https://github.com/lewang/flx][flx-ido]]
[[https://github.com/creichert/ido-vertical-mode.el][ido-vertical-mode]]

** Change dictionary

Change dictionary to "pt_PT-preao"

#+BEGIN_SRC emacs-lisp
  (global-set-key
   [f3]
   (lambda ()
     (interactive)
     (ispell-change-dictionary "pt_PT-preao")))
#+END_SRC

Change dictionary to "en"

#+BEGIN_SRC emacs-lisp
  (global-set-key
   [f4]
   (lambda ()
     (interactive)
     (ispell-change-dictionary "en")))
#+END_SRC
